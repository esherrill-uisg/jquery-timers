{"version":3,"file":"jquery.timers.js","sources":["../src/jquery.timers.ts"],"sourcesContent":["/**\n * jQuery.timers - Timer abstractions for jQuery\n * Originally written by Blair Mitchelmore (blair DOT mitchelmore AT gmail DOT com).\n * New features added by Arttu Manninen (arttu AT kaktus DOT cc).\n * Licensed under the WTFPL (http://sam.zoy.org/wtfpl/).\n * Date: 2013/02/11\n *\n * @author Blair Mitchelmore\n * @author Arttu Manninen\n * @version 1.3\n *\n **/\n/// <reference path=\"./jquery.timers.d.ts\"/>\n\n(function ($) {\n  $.fn.everyTime = function (interval: any, label: any, fn: any, times: any) {\n    this.each(function () {\n      jQuery.timer.add(this, interval, label, fn, times);\n    });\n    return this;\n  };\n\n  $.fn.oneTime = function (interval, label, fn) {\n    return this.each(function () {\n      jQuery.timer.add(this, interval, label, fn, 1);\n    });\n  };\n  $.fn.stopTime = function (label, fn) {\n    return this.each(function () {\n      jQuery.timer.remove(this, label, fn);\n    });\n  }\n  $.fn.hasTime = function (label) {\n    for (var i = 0; i < $(this).length; i++) {\n      if ($.timer.has($(this).eq(i).get(0), label)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  $.timer = {\n    global: [],\n    guid: 1,\n    dataKey: \"jQuery.timer\",\n    regex: /^([0-9]+(?:\\.[0-9]*)?)\\s*(.*s)?$/,\n    powers:\n    {\n      // Yeah this is major overkill...\n      'ms': 1,\n      'cs': 10,\n      'ds': 100,\n      's': 1000,\n      'das': 10000,\n      'hs': 100000,\n      'ks': 1000000\n    },\n    timeParse: function (value) {\n      if (value == undefined || value == null) {\n        return null;\n      }\n\n      const result = this.regex.exec(jQuery.trim(value.toString()));\n      if (result && result[2]) {\n        var num = parseFloat(result[1]);\n        var mult = this.powers[result[2]] || 1;\n        return num * mult;\n      }\n      else {\n        return +value;\n      }\n    },\n    has: function (element, label) {\n      var timers = jQuery.data(element, this.dataKey);\n\n      if (!timers) {\n        return false;\n      }\n\n      if (!label) {\n        if (Object.keys(timers).length) {\n          return true;\n        }\n\n        return false;\n      }\n\n      if (typeof timers[label] === 'undefined') {\n        return false;\n      }\n\n      return true;\n    },\n    add: function (element, interval, label, fn, times) {\n      let counter = 0;\n\n      const val = this.timeParse(interval);\n\n      if (val == null || typeof val != 'number' || isNaN(val) || val < 0) {\n        return;\n      }\n\n      if (typeof times != 'number' || isNaN(times) || times < 0) {\n        times = 0;\n      }\n\n\n      times = times || 0;\n\n      const timers = jQuery.data(element, this.dataKey) || jQuery.data(element, this.dataKey, {});\n\n      if (!timers[label]) {\n        timers[label] = {};\n      }\n\n      (fn as TimerPluginFunction).timerID = (fn as TimerPluginFunction).timerID || this.guid++;\n\n      const handler = function () {\n        if ((++counter > times && times !== 0) || (fn as TimerPluginFunction).call(element, counter) === false) {\n          jQuery.timer.remove(element, label, fn);\n        }\n      };\n\n      handler.timerID = (fn as TimerPluginFunction).timerID;\n      const id = (fn as TimerPluginFunction).timerID;\n      if (id && !timers[label][id]) {\n        timers[label][id] = setInterval(handler, val);\n      }\n\n      this.global.push(element);\n\n    },\n    remove: function (element, label, fn) {\n      const timers = jQuery.data(element, this.dataKey);\n      let ret;\n\n      if (timers) {\n\n        if (!label) {\n          for (label in timers) {\n            this.remove(element, label, fn);\n          }\n\n        }\n        else if (timers[label]) {\n          if (fn) {\n            if (fn.timerID) {\n              clearInterval(timers[label][fn.timerID]);\n              delete timers[label][fn.timerID];\n            }\n          }\n          else {\n            for (let fn in timers[label]) {\n              clearInterval(timers[label][fn]);\n              delete timers[label][fn];\n            }\n          }\n\n          for (ret in timers[label]) {\n            break;\n          }\n\n          if (!ret) {\n            ret = null;\n            delete timers[label];\n          }\n        }\n\n        for (ret in timers) {\n          break;\n        }\n\n        if (!ret) {\n          jQuery.removeData(element, this.dataKey);\n        }\n      }\n    }\n\n  };\n\n  jQuery(window).on(\"unload\", function () {\n    jQuery.each(jQuery.timer.global, function (index, item) {\n      jQuery.timer.remove(item);\n    });\n  });\n})(jQuery);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IAcA,CAAC,UAAU,CAAV,EAAW;QACV;;gBAEI,OAAO,UAAU,qBAAqB;;;;;;;;IASzC;;;;;;IAKA;;;qBAEU,eAAA;qBACF,OAAO,OAAA,SAAgB,CAAC,IAAI;2BACxB,KAAA;;;;;IAOb,WAAO,KAAP;;;;;YAKE;;;;;gBAOE;gBACA;gBACA;;;gBAGA;;;;oCAKoB,KAAK;;;;;;;iCAMV;;IAEjB,yBAAA;;oBAIM;;;;oBAKF,UAAU,KAAK,SAAS;;;;;;;;;IAY3B;;;;;2BAOU,MAAA;;;;iBAKR;;0CAKyB;qBAErB;;;6BAMQ,UAAA;;;;;;;;;;;sBAgBP;;;;aAMY;;;;;;;;8BASa,CAAC;;;;;;;;;0CAUV;;;;;;;4BAUZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA3JhB,QAAA;;;;;;"}